import java.util.*;

class User {
    String role; // Admin, Vehicle Owner, Fleet Manager

    User(String role) {
        this.role = role;
    }
}

class MaintenanceTask {
    String task;
    String date;
    boolean completed;

    MaintenanceTask(String task, String date) {
        this.task = task;
        this.date = date;
        this.completed = false;
    }

    void markCompleted() {
        completed = true;
    }

    @Override
    public String toString() {
        return "Task: " + task + ", Date: " + date + ", Completed: " + (completed ? "Yes" : "No");
    }
}

class Vehicle {
    String vehicleID;
    String ownerID;
    ArrayList<MaintenanceTask> tasks;

    Vehicle(String vehicleID, String ownerID) {
        this.vehicleID = vehicleID;
        this.ownerID = ownerID;
        this.tasks = new ArrayList<>();
    }

    void addMaintenanceTask(String task, String date) {
        tasks.add(new MaintenanceTask(task, date));
    }

    void showMaintenanceRecords() {
        System.out.println("Maintenance records for Vehicle ID: " + vehicleID);
        for (MaintenanceTask task : tasks) {
            System.out.println(task);
        }
    }

    void completeMaintenanceTask(String taskName) {
        for (MaintenanceTask task : tasks) {
            if (task.task.equals(taskName) && !task.completed) {
                task.markCompleted();
                System.out.println("Task '" + taskName + "' marked as completed.");
                return;
            }
        }
        System.out.println("Task not found or already completed.");
    }
}

class VehicleMaintenanceSystem {
    ArrayList<User> users;
    ArrayList<Vehicle> vehicles;

    VehicleMaintenanceSystem() {
        users = new ArrayList<>();
        vehicles = new ArrayList<>();
    }

    void addUser(String role) {
        users.add(new User(role));
    }

    void addVehicle(String vehicleID, String ownerID) {
        vehicles.add(new Vehicle(vehicleID, ownerID));
    }

    Vehicle getVehicle(String vehicleID) {
        for (Vehicle vehicle : vehicles) {
            if (vehicle.vehicleID.equals(vehicleID)) {
                return vehicle;
            }
        }
        return null;
    }

    void showMaintenanceRecordsForAllVehicles() {
        for (Vehicle vehicle : vehicles) {
            vehicle.showMaintenanceRecords();
        }
    }

    void generateReport() {
        System.out.println("\n--- Maintenance Report ---");
        for (Vehicle vehicle : vehicles) {
            vehicle.showMaintenanceRecords();
        }
    }
}

class AdminModule {
    VehicleMaintenanceSystem system;

    AdminModule(VehicleMaintenanceSystem system) {
        this.system = system;
    }

    void manageUsers() {
        System.out.println("Managing Users...");
        // Implement user management functionality here (Add, Remove, Update users)
    }

    void manageVehicles() {
        System.out.println("Managing Vehicles...");
        // Implement vehicle management functionality here (Add, Remove, Update vehicles)
    }
}

class MaintenanceReminderModule {
    VehicleMaintenanceSystem system;

    MaintenanceReminderModule(VehicleMaintenanceSystem system) {
        this.system = system;
    }

    void sendReminders() {
        System.out.println("\nSending Maintenance Reminders...");
        // You can add logic here to send reminders (e.g., check upcoming maintenance tasks)
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        VehicleMaintenanceSystem system = new VehicleMaintenanceSystem();
        AdminModule adminModule = new AdminModule(system);
        MaintenanceReminderModule reminderModule = new MaintenanceReminderModule(system);

        // Add sample users (roles: Admin, Vehicle Owner, Fleet Manager)
        system.addUser("Admin");
        system.addUser("Vehicle Owner");
        system.addUser("Fleet Manager");

        // Role selection for user
        System.out.println("Select your role:");
        System.out.println("1. Admin");
        System.out.println("2. Vehicle Owner");
        System.out.println("3. Fleet Manager");
        System.out.print("Enter your choice (1-3): ");
        int roleChoice = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        String role = "";
        switch (roleChoice) {
            case 1:
                role = "Admin";
                break;
            case 2:
                role = "Vehicle Owner";
                break;
            case 3:
                role = "Fleet Manager";
                break;
            default:
                System.out.println("Invalid role selected.");
                return;
        }

        User user = new User(role);
        System.out.println("Logged in as " + role);

        boolean exit = false;

        while (!exit) {
            // Show module selection menu
            System.out.println("\n--- Module Selection ---");
            System.out.println("1. User Management");
            System.out.println("2. Vehicle Registration");
            System.out.println("3. Maintenance Scheduling");
            System.out.println("4. Maintenance Reminders");
            System.out.println("5. View Maintenance Records");
            System.out.println("6. Generate Maintenance Report");
            System.out.println("7. Logout");
            System.out.print("Select a module: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1: // User Management
                    if (role.equals("Admin")) {
                        adminModule.manageUsers();
                    } else {
                        System.out.println("Access denied. Admin only.");
                    }
                    break;
                case 2: // Vehicle Registration
                    if (role.equals("Admin") || role.equals("Fleet Manager")) {
                        System.out.print("Enter vehicle ID: ");
                        String vehicleID = scanner.nextLine();
                        System.out.print("Enter owner ID: ");
                        String ownerID = scanner.nextLine();
                        system.addVehicle(vehicleID, ownerID);
                        System.out.println("Vehicle registered successfully.");
                    } else {
                        System.out.println("Access denied. Admin or Fleet Manager only.");
                    }
                    break;
                case 3: // Maintenance Scheduling
                    if (role.equals("Admin") || role.equals("Fleet Manager")) {
                        System.out.print("Enter vehicle ID: ");
                        String vehicleID = scanner.nextLine();
                        Vehicle vehicle = system.getVehicle(vehicleID);
                        if (vehicle != null) {
                            System.out.print("Enter maintenance task: ");
                            String task = scanner.nextLine();
                            System.out.print("Enter maintenance date: ");
                            String date = scanner.nextLine();
                            vehicle.addMaintenanceTask(task, date);
                            System.out.println("Maintenance task added.");
                        } else {
                            System.out.println("Vehicle not found.");
                        }
                    } else {
                        System.out.println("Access denied. Admin or Fleet Manager only.");
                    }
                    break;
                case 4: // Maintenance Reminders
                    reminderModule.sendReminders();
                    break;
                case 5: // View Maintenance Records
                    system.showMaintenanceRecordsForAllVehicles();
                    break;
                case 6: // Generate Report
                    system.generateReport();
                    break;
                case 7: // Logout
                    System.out.println("Logging out...");
                    exit = true;
                    break;
                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }

        scanner.close();
    }
}